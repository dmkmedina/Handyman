// Generates a CSS triangle using borders
//
// $pointy-side             - The word "top", "bottom", "left", "right". Used to indicate the direction the arrow faces.
// $arrow-color             - The color hex at the bottom.
// $transparent-border-size - Width of the transparent borders that effect how the triangle is rendered.
// $color-border-size       - Width of the colored border that effect how the triangle is rendered.
//
// Compatible in Everything we support
=triangle($pointy-side, $arrow-color, $transparent-border-size, $color-border-size)
    $side: opposite-position($pointy-side) // Reverse the side
    border: $transparent-border-size solid transparent
    border-#{$side}: $color-border-size solid $arrow-color

// Generates either a min width, max-width, range, or retina media query
//
// $media-query - One of four keywords: "retina", "min", "max", "minmax". Depending on the word you will get that type of media query output.
// $res		    - The size for the breakpoint. Oftern this references a predefined variable. You should probably not have actual values in this field.
// $res2        - Same as $res and only used for minmax media queries to get a range. $res is starting point and $res2 is ending point of the range.
//
// Compatible in IE9+, Everything else.
=media($media-query, $res: 0em, $res2: 0em)
    @if $media-query == retina
        @media only screen and (-webkit-min-device-pixel-ratio: 2), only screen and ( min--moz-device-pixel-ratio: 2), only screen and ( -o-min-device-pixel-ratio: 2/1), only screen and ( min-device-pixel-ratio: 2), only screen and ( min-resolution: 192dpi), only screen and ( min-resolution: 2dppx)
            @content

    @if $media-query == min
        @media screen and ( min-width: $res )
            @content

    @if $media-query == max
        @media screen and ( max-width: $res )
            @content

    @if $media-query == minmax
        @media screen and ( min-width: $res ) and ( max-width: $res2 )
            @content

// Generates values for grid columns. Only outputs width and padding. You must float them manually. This is done for the most flexibility when building out componenets. 
//
// $column-span 	  - How many columns you would like to make.
// $grid-column-count - Total number of columns. Defaults to $grid-column-count setup in helpers/_vars.sass
// $grid-padding      - The padding or gutter of the grid. Defaults to $grid-gutter setup in helpers/_vars.sass
//
// Compatible in Everything we support
=grid($column-span, $grid-columns: $grid-column-count, $grid-padding: $grid-gutter )
    width: ( $column-span / $grid-columns ) * 100%
    padding-left: $grid-padding
    padding-right: $grid-padding

// Used to wrap grid elements and clear them. 
//
// Compatible in Everything we support
=grid-wrap()
    width: 100%
    max-width: $grid-max-width
    margin: 0 auto
    @extend .group

// Push or pull a grid element while leaving it in the flow of the document and effecting other gird elements. 
//
// $column-span   - Number of columns you would like to push over.
// $$grid-columns - Total number of columns. Defaults to $grid-column-count setup in helpers/_vars.sass
//
// Compatible in Everything we support
=push($column-span, $grid-columns: $grid-column-count)
    margin-left: ($column-span / $grid-columns) * 100%

// Pull a grid element while leaving it in the flow of the document and effecting other gird elements. 
//
// $column-span   - Number of columns you would like to push over.
// $$grid-columns - Total number of columns. Defaults to $grid-column-count setup in helpers/_vars.sass
//
// Compatible in Everything we support
=pull($column-span, $grid-columns: $grid-column-count)
    margin-left: (($column-span / $grid-columns) * 100%) * -1

// Creates a sprite with retina support. 
//
// $sprite-name - File name without extension of the sprite you are referencing.
//
// Compatible in Everything we support. IE8 gets weird when this is inside of a media query.
=sprite($sprite-name)
    background: $sprite-sheet
    background-position: sprite-position($sprite-sheet, $sprite-name)
    +sprite-dimensions($sprite-sheet, $sprite-name)

    +media(retina)
        background: $sprite-sheet-retina
        +background-size( round(image-width(sprite-path($sprite-sheet-retina))/2) round(image-height(sprite-path($sprite-sheet-retina))/2) )
        background-position: 0 round(nth( sprite-position($sprite-sheet-retina, $sprite-name), 2) / 2)